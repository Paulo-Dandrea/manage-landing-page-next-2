@import "variables";

/** ============================================
 *! RESET from: https://andy-bell.co.uk/a-modern-css-reset/
 * ============================================= **/

*,
*::before,
*::after {
  box-sizing: border-box;
}

* {
  margin: 0;
  padding: 0;

  /* Remove all font-sizes, boldness, etc. It helps 
  to force the developer to choose the text element based on semantics,
  not size */
  font: inherit;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role="list"],
ol[role="list"] {
  list-style: none;
}

html,
body {
  height: 100%;
}

/* Set core root defaults */
html:focus-within {
  scroll-behavior: smooth;
}

/* Set core body defaults */
body {
  /* min-height: 100vh; */
  text-rendering: optimizespeed;
  line-height: 1.5;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture,
svg {
  max-width: 100%;
  display: block;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* =============== END OF RESET SECTION ============== */

/**  ============================================
 *! Generics
 *=============================================  **/

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: react(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/**  ============================================
 *! Utility classes
 *=============================================  **/

.text-primary-400 {
  color: $clr-primary-400;
}

.text-accent-400 {
  color: $clr-accent-400;
}

.text-accent-100 {
  color: $clr-accent-100;
}

.text-neutral-100 {
  color: $clr-neutral-100;
}

.text-neutral-300 {
  color: $clr-neutral-300;
}

.text-neutral-900 {
  color: $clr-neutral-900;
}

.bg-primary-400 {
  background-color: $clr-primary-400;
}

.bg-accent-400 {
  background-color: $clr-accent-400;
}

.bg-accent-100 {
  background-color: $clr-accent-100;
}

.bg-neutral-100 {
  background-color: $clr-neutral-100;
}

.bg-neutral-300 {
  background-color: $clr-neutral-300;
}

.bg-neutral-900 {
  background-color: $clr-neutral-900;
}

.fw-bold {
  font-weight: $fw-bold;
}

.fw-semi-bold {
  font-weight: $fw-semi-bold;
}

.fw-regular {
  font-weight: $fw-regular;
}

.fs-300 {
  font-size: $fs-300;
}

.fs-400 {
  font-size: $fs-400;
}

.fs-500 {
  font-size: $fs-500;
}

.fs-600 {
  font-size: $fs-600;
}

.fs-primary-heading {
  font-size: $fs-primary-heading;
  line-height: 1.2;
}

.fs-secondary-heading {
  font-size: $fs-secondary-heading;
  line-height: 1.2;
}

// apply vertical padding
.padding-block-400 {
  padding-block: $size-400;
}

.padding-block-500 {
  padding-block: $size-500;
}

.padding-block-600 {
  padding-block: $size-600;
}

.padding-block-700 {
  padding-block: $size-700;
}

.padding-block-800 {
  padding-block: $size-800;
}

.padding-block-900 {
  padding-block: $size-900;
}

.display_sm_none {
  display: none;
}

.display_md_inline_flex {
  @media (min-width: $bp-mobile) {
    display: inline-flex;
  }
}

.container {
  /* LEARNED: This CSS code sets the width of an element
    to be the minimum value between the custom property "--max-width"
    and 100% of the width of its parent container minus the value of the custom
     property "--padding". This allows the element to be
    responsive and adapt to different screen sizes while also ensuring that it 
    doesn't exceed the maximum width defined by the "--max-width" property.
  */
  --max-width: 1100px;
  --padding: 1rem;

  width: min(var(--max-width), 100% - var(--padding));
  margin-inline: auto;
}

.justify-self-center {
  justify-self: center;
}

.justify-self-end-md {
  @media (min-width: $bp-mobile) {
    justify-self: end;
  }
}

.flow > :where(:not(:last-child)) {
  // LEARNED: 'where' here is to avoid the specifity boosting that comes with ":not(last-child"
  margin-bottom: $size-700;
}

.flow--tight > :where(:not(:last-child)) {
  // LEARNED: 'where' here is to avoid the specifity boosting that comes with ":not(last-child"
  margin-bottom: $size-400;
}

.even-columns {
  display: grid;
  gap: 1rem;

  @media (min-width: $bp-mobile) {
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
  }
}

.vertical-align-center {
  align-items: center;
}
